# -*- coding: utf-8 -*-
"""mixdeepfaceexample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fXDDUD4FqN-d3imfyTV1fWSq2dhBtdav

### Installing the requirements

Adding the library
"""

import os
import urllib.request

"""Installing and adding the deepface library"""

try:
    from deepface import DeepFace
except:
  try:
    import pip
    pip.main(['install', "deepface"])
  except:
    os.system("pip install deepface")
finally:
  from deepface import DeepFace

"""Creating and config the main folder"""

main_db_folder = "db/"

singular_face_folder = main_db_folder+"singular_face/"

singular_face_1_dir = singular_face_folder+"face_1.jpg"
singular_face_2_dir = singular_face_folder+"face_2.jpg"


group_face_folder = main_db_folder+"group_face/"
face_group_folder = group_face_folder+"group/"
group_face_first_image = group_face_folder+"face_1.jpg"

second_face_group_2_1_image = face_group_folder+"face_2.1.jpg"
second_face_group_2_2_image = face_group_folder+"face_2.2.jpg"
second_face_group_2_3_image = face_group_folder+"face_2.3.jpg"

os.makedirs(main_db_folder, exist_ok=True)

"""### Face Verification

Creating the folder
"""

os.makedirs(singular_face_folder, exist_ok=True)

"""Installing the photos"""

face_1_url_jpg = "" #@param {type:"string"}
face_2_url_jpg = "" #@param {type:"string"}

urllib.request.urlretrieve(face_1_url_jpg, singular_face_1_dir)
urllib.request.urlretrieve(face_2_url_jpg, singular_face_2_dir)

"""Run test"""

result  = DeepFace.verify(singular_face_1_dir, singular_face_2_dir)
#results = DeepFace.verify([['img1.jpg', 'img2.jpg'], ['img1.jpg', 'img3.jpg']])
print("Is verified: ", result["verified"])

"""Compare Models"""

models = ["VGG-Face", "Facenet", "OpenFace", "DeepFace", "DeepID", "ArcFace", "Dlib"]
for model in models:
   result = DeepFace.verify(singular_face_1_dir, singular_face_2_dir, model_name = model)
   print("\nModel: "+model)
   print("Verification result: "+str(result["verified"])+"\n\n")

"""Compare Metrics"""

metrics = ["cosine", "euclidean", "euclidean_l2"]
for metric in metrics:
   result = DeepFace.verify(singular_face_1_dir, singular_face_2_dir,distance_metric = metric)
   print("\nMetrix: "+metric)
   print("Verification result: "+str(result["verified"])+"\n\n")

"""### Face Recognition From Database

Creating the folder
"""

os.makedirs(group_face_folder, exist_ok=True)
os.makedirs(face_group_folder, exist_ok=True)

"""Installing the photos"""

face_1_url_jpg = "" #@param {type:"string"}

face_2_1_url_jpg = "" #@param {type:"string"}
face_2_2_url_jpg = "" #@param {type:"string"}
face_2_3_url_jpg = "" #@param {type:"string"}

urllib.request.urlretrieve(face_1_url_jpg, group_face_first_image)
urllib.request.urlretrieve(face_2_1_url_jpg, second_face_group_2_1_image)
urllib.request.urlretrieve(face_2_2_url_jpg, second_face_group_2_2_image)
urllib.request.urlretrieve(face_2_3_url_jpg, second_face_group_2_3_image)

"""Run test"""

df = DeepFace.find(img_path = group_face_first_image, db_path = face_group_folder)
df.head()

"""Compare Models"""

models = ["VGG-Face", "Facenet", "OpenFace", "DeepFace", "DeepID", "ArcFace", "Dlib"]
for model in models:
   df = DeepFace.find(img_path = group_face_first_image, db_path = face_group_folder, model_name = model)
   print("\nModel: "+model)
   print("Recognition result: ")
   print(df.head())
   print("\n")

"""Compare Metrics"""

metrics = ["cosine", "euclidean", "euclidean_l2"]
for metric in metrics:
   df = DeepFace.find(img_path = group_face_first_image, db_path = face_group_folder, distance_metric = metric)
   print("\nMetrix: "+metric)
   print("Recognition result: ")
   print(df.head())
   print("\n")

"""### Facial Attribute Analysis

Installing the photos
"""

face_1_url_jpg = "" #@param {type:"string"}

urllib.request.urlretrieve(face_1_url_jpg, singular_face_1_dir)

"""Run test"""

obj = DeepFace.analyze(img_path = singular_face_1_dir, actions = ['age', 'gender', 'race', 'emotion'])
#objs = DeepFace.analyze(["img1.jpg", "img2.jpg", "img3.jpg"]) #analyzing multiple faces same time
print("\n")
print(obj["age"]," years old ",obj["dominant_race"]," ",obj["dominant_emotion"]," ", obj["gender"])
